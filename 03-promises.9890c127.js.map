{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaF,SAASC,cAAc,kBACpCE,EAAOH,SAASC,cAAc,iBAC9BG,EAASJ,SAASC,cAAc,mBAqBtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5BbR,EAAKe,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,IAAIC,EAAQC,OAAOhB,EAAWiB,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKhB,EAAOe,MAAOC,IAC7BA,EAAI,IACRH,GAASC,OAAOf,EAAKgB,QAEtBd,EAAce,EAAGH,GACfI,MAAK,EAACf,SAAEA,EAAQC,MAAEA,MACjBe,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAqBlB,QAAiBC,MAAU,IAEzEkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAClBe,EAAAzB,GAAS0B,OAAOG,QAAQ,sBAAoBpB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst firstInput = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  let delay = Number(firstInput.value);\n\nfor (let i = 1; i <= amount.value; i++) {\n  if (i > 1) {\n  delay += Number(step.value);\n  };\n createPromise(i, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}\n});\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n//==============================================================\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n//   }, 2000);\n// });\n\n//===================================================================\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//======================================================================\n\n// form.addEventListener(\"submit\", (event) => {\n//   event.preventDefault();\n\n//=========================================================================="],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$firstInput","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","Number","value","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.9890c127.js.map"}